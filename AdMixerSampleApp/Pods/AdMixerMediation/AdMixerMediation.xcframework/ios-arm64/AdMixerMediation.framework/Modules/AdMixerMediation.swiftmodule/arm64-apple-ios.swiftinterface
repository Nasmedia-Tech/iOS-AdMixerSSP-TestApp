// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AdMixerMediation
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdMixer
@_exported import AdMixerMediation
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import Foundation
import Network
import Swift
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @_inheritsConvenienceInitializers open class Adapter : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func loadBannerAd(bannerAdConfiguration: AdMixerMediation.BannerConfiguration, bannerHandler: any AdMixerMediation.BannerHandler)
  open func loadInterstitialAd(bannerAdConfiguration: AdMixerMediation.BannerConfiguration, interstitialHandler: any AdMixerMediation.InterstitialHandler)
  open func loadRewardAd(rewardConfiguration: AdMixerMediation.RewardConfiguration, rewardHandler: any AdMixerMediation.RewardHandler)
  open func loadNativeAd(nativeConfiguration: AdMixerMediation.NativeConfiguration, nativeHandler: any AdMixerMediation.NativeHandler)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class AMMBannerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var adUnitID: Swift.Int
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AdMixerMediation.AMMBannerViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var viewController: UIKit.UIViewController!
  @_Concurrency.MainActor @preconcurrency required public init(width: Swift.Double)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func stop()
  @_Concurrency.MainActor @preconcurrency public func load()
  @objc deinit
}
extension AdMixerMediation.AMMBannerView : AdMixer.AMBannerAdDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadBannerAdSuccess()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadBannerAdFail(with error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didTapBannerAd()
}
extension AdMixerMediation.AMMBannerView : AdMixerMediation.BannerHandler {
  @_Concurrency.MainActor @preconcurrency public func onSuccessBanner(mediationBanner: any AdMixerMediation.BannerAd)
  @_Concurrency.MainActor @preconcurrency public func onFailBanner()
  @_Concurrency.MainActor @preconcurrency public func onClickBanner()
}
@objc public protocol AMMBannerViewDelegate {
  @objc func onSuccessBanner()
  @objc func onFailBanner()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AMMediation : ObjectiveC.NSObject {
  @objc public static let shared: AdMixerMediation.AMMediation
  @objc public var isDebugEnabled: Swift.Bool
  @objc public func setDebugEnabled(isEnabled: Swift.Bool)
  @objc public func initialize(mediaKey: Swift.Int, adunitID: Swift.Set<Swift.Int>)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AMMediationSDK : ObjectiveC.NSObject {
  @objc public static let shared: AdMixerMediation.AMMediationSDK
  @objc public var hostUrl: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AMMInterstitial : ObjectiveC.NSObject {
  public var adUnitID: Swift.Int
  weak public var delegate: (any AdMixerMediation.AMMInterstitialDelegate)?
  public var viewController: UIKit.UIViewController!
  public var viewType: AdMixerMediation.AMMInterstitialType
  public var popupOption: AdMixerMediation.AMMInterstitialPopupOption
  public func load()
  public func stop()
  @objc override dynamic public init()
  @objc deinit
}
extension AdMixerMediation.AMMInterstitial : AdMixer.AMBannerAdDelegate {
  @objc dynamic public func didLoadFullBannerAdSuccess()
  @objc dynamic public func didLoadFullBannerAdFail(with error: (any Swift.Error)?)
  @objc dynamic public func didFullBannerAdDismiss()
  @objc dynamic public func didTapFullBannerAd()
}
extension AdMixerMediation.AMMInterstitial : AdMixerMediation.InterstitialHandler {
  public func onSuccessBanner(mediationBanner: any AdMixerMediation.InterstitialAd)
  public func onFailBanner()
  public func onClickBanner()
}
@objc public protocol AMMInterstitialDelegate {
  @objc func onSuccessInterstitial()
  @objc func onFailInterstitial()
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AMMNativeAdView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var adUnitID: Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AdMixerMediation.AMMNativeDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var viewController: UIKit.UIViewController!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var iv_icon: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var l_headline: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var l_advertiser: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var l_description: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var media: UIKit.UIView?
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var b_cta: UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AMMNativeAdViewContainer : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var nativeAdView: AdMixerMediation.AMMNativeAdView!
  @_Concurrency.MainActor @preconcurrency public var adUnitID: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var viewController: UIKit.UIViewController!
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AdMixerMediation.AMMNativeDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency public func stop()
  @_Concurrency.MainActor @preconcurrency public func load()
  @objc deinit
}
extension AdMixerMediation.AMMNativeAdViewContainer : AdMixer.AMNativeAdDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadNativeAdSuccess(amNative: AdMixer.AMNative)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadNativeAdFail(with error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didTapNativeAd()
}
extension AdMixerMediation.AMMNativeAdViewContainer : AdMixerMediation.NativeHandler {
  @_Concurrency.MainActor @preconcurrency public func onSuccessNative(nativeAd: any AdMixerMediation.NativeAd)
  @_Concurrency.MainActor @preconcurrency public func onFailNative()
  @_Concurrency.MainActor @preconcurrency public func onClickNative()
}
@objc public protocol AMMNativeDelegate {
  @objc func onSuccessNative()
  @objc func onFailNative()
}
@objc @_inheritsConvenienceInitializers public class AMMRewardVideo : ObjectiveC.NSObject {
  public var adUnitID: Swift.Int
  weak public var delegate: (any AdMixerMediation.AMMRewardVideoDelegate)?
  weak public var viewController: UIKit.UIViewController!
  public var customParam: [Swift.String : Swift.String]?
  public func load()
  public func stop()
  @objc override dynamic public init()
  @objc deinit
}
extension AdMixerMediation.AMMRewardVideo : AdMixer.AMVideoAdDelegate {
  @objc dynamic public func didLoadRewardAdSuccess()
  @objc dynamic public func didLoadRewardAdFail(with error: (any Swift.Error)?)
  @objc dynamic public func didShowRewardAdSuccess()
  @objc dynamic public func didCloseRewardAd()
  @objc dynamic public func didTapRewardAdViewMore()
  @objc dynamic public func didRewardVideoComplete()
}
extension AdMixerMediation.AMMRewardVideo : AdMixerMediation.RewardHandler {
  public func onSuccessRewardVideo(rewardAd: any AdMixerMediation.RewardAd)
  public func onFailRewardVideo()
  public func onCloseRewardVideo()
  public func onTapRewardVideo()
  public func onRewardVideoComplete()
}
@objc public protocol AMMRewardVideoDelegate {
  @objc func onSuccessRewardVideo()
  @objc func onFailRewardVideo()
  @objc func onCloseRewardVideo()
  @objc func onTapRewardVideo()
  @objc func onRewardVideoComplete()
}
@objc @_inheritsConvenienceInitializers public class AMMVideoInterstitial : ObjectiveC.NSObject {
  public var adUnitID: Swift.Int
  weak public var delegate: (any AdMixerMediation.AMMVideoInterstitialDelegate)?
  public var viewController: UIKit.UIViewController!
  public func load()
  public func stop()
  @objc override dynamic public init()
  @objc deinit
}
extension AdMixerMediation.AMMVideoInterstitial : AdMixer.AMVideoAdDelegate {
  @objc dynamic public func didLoadFullAdSuccess()
  @objc dynamic public func didLoadFullAdFail(with error: (any Swift.Error)?)
  @objc dynamic public func didShowFullAdSuccess()
  @objc dynamic public func didCloseFullAd()
  @objc dynamic public func didTapFullAdViewMore()
  @objc dynamic public func didFullAdComplete()
}
@objc public protocol AMMVideoInterstitialDelegate {
  @objc func onSuccessVideoInterstitial()
  @objc func onFailVideoInterstitial()
  @objc func onCloseVideoInterstitial()
  @objc func onTapVideoInterstitialViewMore()
  @objc func onCompleteVideoInterstitial()
}
@objc @_Concurrency.MainActor @preconcurrency public class AMMVideoView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var adUnitID: Swift.Int
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AdMixerMediation.AMMVideoViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var viewController: UIKit.UIViewController!
  @_Concurrency.MainActor @preconcurrency public var customParam: [Swift.String : Swift.String]?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func load()
  @_Concurrency.MainActor @preconcurrency public func stop()
  @objc deinit
}
extension AdMixerMediation.AMMVideoView : AdMixer.AMVideoAdDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadAdSuccess()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadAdFail(with error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didShowAdSuccess()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didSkipAd()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didTapAdViewMore()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didAdComplete()
}
@objc public protocol AMMVideoViewDelegate {
  @objc func onSuccessVideo()
  @objc func onFailVideo()
  @objc func onSkipVideo()
  @objc func onTapVideoViewMore()
  @objc func onCompleteVideo()
}
public protocol BannerAd : ObjectiveC.NSObject {
  func view() -> UIKit.UIView
}
public class BannerConfiguration : AdMixerMediation.Configuration {
  public var width: Swift.Double?
  public var height: Swift.Double?
  public var type: AdMixerMediation.AMMInterstitialType
  @objc public var popupOption: AdMixerMediation.AMMInterstitialPopupOption
  public init(rootViewController: UIKit.UIViewController, adUnitId: Swift.String, width: Swift.Double?, height: Swift.Double? = nil, type: AdMixerMediation.AMMInterstitialType = .basic, popupOption: AdMixerMediation.AMMInterstitialPopupOption = AMMInterstitialPopupOption())
  @objc deinit
}
public protocol BannerHandler : AnyObject {
  func onSuccessBanner(mediationBanner: any AdMixerMediation.BannerAd)
  func onFailBanner()
  func onClickBanner()
}
@objcMembers public class Configuration {
  @objc public var rootViewController: UIKit.UIViewController
  @objc public var adUnitId: Swift.String
  @objc public init(rootViewController: UIKit.UIViewController, adUnitId: Swift.String)
  @objc deinit
}
public protocol InterstitialAd : ObjectiveC.NSObject {
}
@_inheritsConvenienceInitializers public class InterstitialConfiguration : AdMixerMediation.Configuration {
  @objc override public init(rootViewController: UIKit.UIViewController, adUnitId: Swift.String)
  @objc deinit
}
public enum AMMInterstitialType {
  case popup
  case basic
  public static func == (a: AdMixerMediation.AMMInterstitialType, b: AdMixerMediation.AMMInterstitialType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class AMMInterstitialPopupOption : ObjectiveC.NSObject {
  public var buttonTitle: Swift.String
  public var buttonTextColor: UIKit.UIColor
  public var buttonBackgroundColor: UIKit.UIColor
  public init(buttonTitle: Swift.String = "광고 닫기", buttonTextColor: UIKit.UIColor = .black, buttonBackgroundColor: UIKit.UIColor = .white)
  @objc deinit
}
public protocol InterstitialHandler : AnyObject {
  func onSuccessBanner(mediationBanner: any AdMixerMediation.InterstitialAd)
  func onFailBanner()
  func onClickBanner()
}
public protocol NativeAd : ObjectiveC.NSObject {
  func view() -> UIKit.UIView
  func mediaView() -> UIKit.UIView
}
public class NativeConfiguration : AdMixerMediation.Configuration {
  @objc final public let mAMMNativeAdView: AdMixerMediation.AMMNativeAdView
  @objc public init(rootViewController: UIKit.UIViewController, adUnitId: Swift.String, _AMMNativeAdView: AdMixerMediation.AMMNativeAdView)
  @objc deinit
}
public protocol NativeHandler : AnyObject {
  func onSuccessNative(nativeAd: any AdMixerMediation.NativeAd)
  func onFailNative()
  func onClickNative()
}
public protocol RewardAd : ObjectiveC.NSObject {
}
@_inheritsConvenienceInitializers public class RewardConfiguration : AdMixerMediation.Configuration {
  @objc override public init(rootViewController: UIKit.UIViewController, adUnitId: Swift.String)
  @objc deinit
}
public protocol RewardHandler : AnyObject {
  func onSuccessRewardVideo(rewardAd: any AdMixerMediation.RewardAd)
  func onFailRewardVideo()
  func onCloseRewardVideo()
  func onTapRewardVideo()
  func onRewardVideoComplete()
}
extension AdMixerMediation.AMMInterstitialType : Swift.Equatable {}
extension AdMixerMediation.AMMInterstitialType : Swift.Hashable {}
